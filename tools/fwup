#!/bin/env python3

import sys
import requests
import common_bf
import argparse

remote_url = "https://downloaders.azurewebsites.net/downloaders/bluefield2_fw_downloader/helper.php"


def get_latest_version():
    data = {'action': 'get_versions', }
    response = requests.post(remote_url, data=data)
    return response.json()["latest"]


def get_distros(v):
    data = {
      'action': 'get_distros',
      'version': v,
    }
    r = requests.post(remote_url, data=data)

    return r.json()


def get_os(version, distro):
    data = {
      'action': 'get_oses',
      'version': version,
      'distro': distro,
    }
    r = requests.post(remote_url, data=data)
    return r.json()[0]


def get_download_info(version, distro, os_param):
    data = {
      'action': 'get_download_info',
      'version': version,
      'distro': distro,
      'os': os_param,
      'arch': 'x64'
    }
    r = requests.post(remote_url, data=data)
    return r.json()


def update_bf_firmware(args):
    bf = common_bf.find_bf2_pci_addresses_or_quit(args.id)
    target_psid = common_bf.mst_flint(bf)["PSID"]

    version = get_latest_version()
    print("Latest version: %s" % version)
    if common_bf.mst_flint(bf)["FW Version"] == version:
        print(f"currently already on {version}")
        return 1

    d = get_distros(version)
    print("Distros: %s" % d)

    for e in d:
        os_param = get_os(version, e)
        print(os_param)

        if os_param != target_psid:
            continue

        url = get_download_info(version, e, os_param)["files"][0]["url"]
        print(url)

        common_bf.run(f"wget -q {url} -O fw.zip")
        ret = common_bf.run("unzip -o fw.zip")
        bin_name = [x for x in ret.out.split(" ") if ".bin" in x]
        if len(bin_name) != 1:
            print("unexpected number of binaries to download")
        common_bf.run(f"mstflint -d {bf} -i {bin_name[0]} burn")
        common_bf.run(f"mstfwreset -y -d {bf}r ")
    return 0


def main():
    parser = argparse.ArgumentParser(description='Specify the id of the BF-2.Updates the firmware on the BF-2 to the latest avaible one.')
    parser.add_argument('-i', '--id', dest='id', default=0, action='store', type=int, help='Specify the id of the BF-2.')
    args = parser.parse_args()
    r = update_bf_firmware(args)
    sys.exit(r)


if __name__ == "__main__":
    main()
